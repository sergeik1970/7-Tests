import React, { useState, useEffect } from "react";
import { useRouter } from "next/router";
import DashboardLayout from "@/shared/components/DashboardLayout";
import { useAuth } from "@/contexts/AuthContext";
import { getTeacherStatistics } from "@/services/api";
import type { TeacherStatistics } from "@/services/api";
import { isTeacher } from "@/shared/utils/roles";
import styles from "./statistics.module.scss";

const StatisticsPage = () => {
    const router = useRouter();
    const { user } = useAuth();
    const [statistics, setStatistics] = useState<TeacherStatistics | null>(null);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState("");

    useEffect(() => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —É—á–∏—Ç–µ–ª—å –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
        if (user && !isTeacher(user.role)) {
            router.push('/dashboard');
            return;
        }

        if (user) {
            loadStatistics();
        }
    }, [user, router]);

    const loadStatistics = async () => {
        try {
            setIsLoading(true);
            setError("");
            const data = await getTeacherStatistics();
            setStatistics(data);
        } catch (err) {
            setError(err instanceof Error ? err.message : "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
        } finally {
            setIsLoading(false);
        }
    };

    const getStatusText = (status: string) => {
        switch (status) {
            case 'active': return '–ê–∫—Ç–∏–≤–Ω—ã–π';
            case 'draft': return '–ß–µ—Ä–Ω–æ–≤–∏–∫';
            default: return status;
        }
    };

    const getStatusClass = (status: string) => {
        switch (status) {
            case 'active': return styles.statusActive;
            case 'draft': return styles.statusDraft;
            default: return '';
        }
    };

    if (isLoading) {
        return (
            <DashboardLayout>
                <div className={styles.loading}>
                    <h2>–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...</h2>
                </div>
            </DashboardLayout>
        );
    }

    if (error || !statistics) {
        return (
            <DashboardLayout>
                <div className={styles.error}>
                    <h2>–û—à–∏–±–∫–∞</h2>
                    <p>{error || "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"}</p>
                    <button onClick={loadStatistics} className={styles.retryButton}>
                        –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                    </button>
                </div>
            </DashboardLayout>
        );
    }

    return (
        <DashboardLayout>
            <div className={styles.statisticsPage}>
                <div className={styles.header}>
                    <h1>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h1>
                    <p>–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–∏—Ö —Ç–µ—Å—Ç–∞—Ö –∏ —É—á–µ–Ω–∏–∫–∞—Ö</p>
                </div>

                {/* –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
                <div className={styles.overviewSection}>
                    <h2>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
                    <div className={styles.statsGrid}>
                        <div className={styles.statCard}>
                            <div className={styles.statIcon}>üìù</div>
                            <div className={styles.statContent}>
                                <div className={styles.statNumber}>{statistics.overview.totalTests}</div>
                                <div className={styles.statLabel}>–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤</div>
                                <div className={styles.statDetails}>
                                    {statistics.overview.activeTests} –∞–∫—Ç–∏–≤–Ω—ã—Ö, {statistics.overview.draftTests} —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤
                                </div>
                            </div>
                        </div>

                        <div className={styles.statCard}>
                            <div className={styles.statIcon}>üë•</div>
                            <div className={styles.statContent}>
                                <div className={styles.statNumber}>{statistics.overview.totalStudents}</div>
                                <div className={styles.statLabel}>–£—á–µ–Ω–∏–∫–æ–≤</div>
                                <div className={styles.statDetails}>
                                    –ü—Ä–æ—à–ª–∏ –≤–∞—à–∏ —Ç–µ—Å—Ç—ã
                                </div>
                            </div>
                        </div>

                        <div className={styles.statCard}>
                            <div className={styles.statIcon}>üéØ</div>
                            <div className={styles.statContent}>
                                <div className={styles.statNumber}>{statistics.overview.totalAttempts}</div>
                                <div className={styles.statLabel}>–ü–æ–ø—ã—Ç–æ–∫</div>
                                <div className={styles.statDetails}>
                                    {statistics.overview.completedAttempts} –∑–∞–≤–µ—Ä—à–µ–Ω–æ
                                </div>
                            </div>
                        </div>

                        <div className={styles.statCard}>
                            <div className={styles.statIcon}>‚≠ê</div>
                            <div className={styles.statContent}>
                                <div className={styles.statNumber}>{statistics.overview.averageScore}%</div>
                                <div className={styles.statLabel}>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª</div>
                                <div className={styles.statDetails}>
                                    –ü–æ –≤—Å–µ–º —Ç–µ—Å—Ç–∞–º
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ—Å—Ç–∞–º */}
                <div className={styles.testsSection}>
                    <h2>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ—Å—Ç–∞–º</h2>
                    {statistics.testStatistics.length === 0 ? (
                        <div className={styles.emptyState}>
                            <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ—Å—Ç–æ–≤</p>
                        </div>
                    ) : (
                        <div className={styles.testsTable}>
                            <div className={styles.tableHeader}>
                                <div className={styles.tableCell}>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</div>
                                <div className={styles.tableCell}>–°—Ç–∞—Ç—É—Å</div>
                                <div className={styles.tableCell}>–ü–æ–ø—ã—Ç–æ–∫</div>
                                <div className={styles.tableCell}>–ó–∞–≤–µ—Ä—à–µ–Ω–æ</div>
                                <div className={styles.tableCell}>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª</div>
                                <div className={styles.tableCell}>–°–æ–∑–¥–∞–Ω</div>
                            </div>
                            {statistics.testStatistics.map((test) => (
                                <div key={test.id} className={styles.tableRow}>
                                    <div className={styles.tableCell}>
                                        <div className={styles.testTitle}>{test.title}</div>
                                    </div>
                                    <div className={styles.tableCell}>
                                        <span className={`${styles.status} ${getStatusClass(test.status)}`}>
                                            {getStatusText(test.status)}
                                        </span>
                                    </div>
                                    <div className={styles.tableCell}>{test.totalAttempts}</div>
                                    <div className={styles.tableCell}>{test.completedAttempts}</div>
                                    <div className={styles.tableCell}>
                                        {test.averageScore > 0 ? `${test.averageScore}%` : '‚Äî'}
                                    </div>
                                    <div className={styles.tableCell}>
                                        {new Date(test.createdAt).toLocaleDateString('ru-RU')}
                                    </div>
                                </div>
                            ))}
                        </div>
                    )}
                </div>
            </div>
        </DashboardLayout>
    );
};

export default StatisticsPage;